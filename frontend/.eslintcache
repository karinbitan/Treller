[{"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\index.js":"1","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\App.jsx":"3","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\TrellerApp\\TrellerApp.jsx":"4","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeader\\MainHeader.jsx":"5","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\boardService.js":"6","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\index.js":"7","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\CardPreview.jsx":"8","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\userSercvice.js":"9","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\index.js":"10","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\userReducer.js":"11","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\boardReducer.js":"12","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\boardActions.js":"13","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\userActions.js":"14","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\cardActions.js":"15","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\cardService.js":"16","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\eventBusService.js":"17","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\cardReducer.js":"18","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardComments\\CardComments.jsx":"19","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\ListPreview.jsx":"20","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddCard\\AddCard.jsx":"21","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\index.js":"22","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\authActions.js":"23","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\authService.js":"24","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\index.js":"25","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\HomePage.jsx":"26","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\UserProfile\\UserProfile.jsx":"27","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\index.js":"28","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\Login.jsx":"29","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\HttpService.js":"30","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Filter\\Filter.jsx":"31","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\httpService.js":"32","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardHeader\\BoardHeader.jsx":"33","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\img-upload-service.js":"34","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddList\\AddList.jsx":"35","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardEditModal\\CardEditModal.jsx":"36","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\socketService.js":"37","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Boards\\Boards.jsx":"38","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\index.js":"39","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\CardDetails.jsx":"40","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\utilService.js":"41","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardChecklists\\CardChecklists.jsx":"42","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\searchService.js":"43","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\searchReducer.js":"44","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\searchActions.js":"45","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardDescription\\CardDescription.jsx":"46","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\InviteMembers\\InviteMembers.jsx":"47","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardOptions\\CardOptions.jsx":"48","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Notifications\\Notifications.jsx":"49","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\NotificiationMsg\\NotificiationMsg.jsx":"50","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardMenu\\BoardMenu.jsx":"51","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AvatarOptions\\AvatarOptions.jsx":"52"},{"size":628,"mtime":1612358192232,"results":"53","hashOfConfig":"54"},{"size":362,"mtime":499162500000,"results":"55","hashOfConfig":"54"},{"size":2563,"mtime":1613837962462,"results":"56","hashOfConfig":"54"},{"size":16456,"mtime":1614021632489,"results":"57","hashOfConfig":"54"},{"size":4030,"mtime":1614011416357,"results":"58","hashOfConfig":"54"},{"size":2338,"mtime":1613996287259,"results":"59","hashOfConfig":"54"},{"size":43,"mtime":1612371711218,"results":"60","hashOfConfig":"54"},{"size":4605,"mtime":1613836919566,"results":"61","hashOfConfig":"54"},{"size":1171,"mtime":1613654171888,"results":"62","hashOfConfig":"54"},{"size":622,"mtime":1612634555157,"results":"63","hashOfConfig":"54"},{"size":808,"mtime":1611419372036,"results":"64","hashOfConfig":"54"},{"size":826,"mtime":1613391694461,"results":"65","hashOfConfig":"54"},{"size":3939,"mtime":1613841594973,"results":"66","hashOfConfig":"54"},{"size":1355,"mtime":1613580107961,"results":"67","hashOfConfig":"54"},{"size":3484,"mtime":1613837627506,"results":"68","hashOfConfig":"54"},{"size":2177,"mtime":1613648693442,"results":"69","hashOfConfig":"54"},{"size":405,"mtime":1611829576251,"results":"70","hashOfConfig":"54"},{"size":803,"mtime":1610531875309,"results":"71","hashOfConfig":"54"},{"size":2955,"mtime":1614010419368,"results":"72","hashOfConfig":"54"},{"size":4627,"mtime":1614021623764,"results":"73","hashOfConfig":"54"},{"size":1943,"mtime":1614006770126,"results":"74","hashOfConfig":"54"},{"size":43,"mtime":1610295231626,"results":"75","hashOfConfig":"54"},{"size":917,"mtime":1613402764934,"results":"76","hashOfConfig":"54"},{"size":1208,"mtime":1612960157498,"results":"77","hashOfConfig":"54"},{"size":37,"mtime":1610806879811,"results":"78","hashOfConfig":"54"},{"size":1732,"mtime":1613993682792,"results":"79","hashOfConfig":"54"},{"size":4383,"mtime":1613837115043,"results":"80","hashOfConfig":"54"},{"size":31,"mtime":1610635323448,"results":"81","hashOfConfig":"54"},{"size":3513,"mtime":1614009270475,"results":"82","hashOfConfig":"54"},{"size":981,"mtime":1611227424023,"results":"83","hashOfConfig":"84"},{"size":5196,"mtime":1614007505493,"results":"85","hashOfConfig":"54"},{"size":1078,"mtime":1612615853947,"results":"86","hashOfConfig":"54"},{"size":5550,"mtime":1614008398988,"results":"87","hashOfConfig":"54"},{"size":691,"mtime":1606326671170,"results":"88","hashOfConfig":"54"},{"size":2022,"mtime":1614006738017,"results":"89","hashOfConfig":"54"},{"size":1295,"mtime":1613379366882,"results":"90","hashOfConfig":"54"},{"size":549,"mtime":1612195322523,"results":"91","hashOfConfig":"54"},{"size":10360,"mtime":1613838047341,"results":"92","hashOfConfig":"54"},{"size":43,"mtime":1612372825483,"results":"93","hashOfConfig":"54"},{"size":15528,"mtime":1613996283292,"results":"94","hashOfConfig":"54"},{"size":571,"mtime":1613655477597,"results":"95","hashOfConfig":"54"},{"size":4359,"mtime":1613390114609,"results":"96","hashOfConfig":"54"},{"size":357,"mtime":1613997082419,"results":"97","hashOfConfig":"54"},{"size":299,"mtime":1612634904931,"results":"98","hashOfConfig":"54"},{"size":352,"mtime":1612687420399,"results":"99","hashOfConfig":"54"},{"size":2904,"mtime":1614010434842,"results":"100","hashOfConfig":"54"},{"size":3696,"mtime":1614013028716,"results":"101","hashOfConfig":"54"},{"size":6072,"mtime":1614008252482,"results":"102","hashOfConfig":"54"},{"size":3718,"mtime":1614007692370,"results":"103","hashOfConfig":"54"},{"size":800,"mtime":1613837897959,"results":"104","hashOfConfig":"54"},{"size":4439,"mtime":1614008449128,"results":"105","hashOfConfig":"54"},{"size":1960,"mtime":1614012824157,"results":"106","hashOfConfig":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"1ivsba1",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"170"},"1lrwrja",{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"109"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"109"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"109"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"109"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"109"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"109"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"109"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\index.js",[],["222","223"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\App.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\TrellerApp\\TrellerApp.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeader\\MainHeader.jsx",["224"],"import { connect } from 'react-redux';\nimport { logout } from '../../store/actions/authActions';\nimport { addBoard } from '../../store/actions/boardActions';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport Logo from './../../assets/treller-logo.png';\nimport Home from './../../assets/home-icon.png';\nimport Notification from './../../assets/bell-icon.png';\nimport LoginIcon from './../../assets/login-icon.png';\nimport { Notifications } from '../Notifications/Notifications';\nimport { Filter } from '../Filter/Filter';\n\nimport './MainHeader.scss';\nimport { AvatarOptions } from '../AvatarOptions/AvatarOptions';\n\nfunction _MainHeader(props) {\n    const [isNotificationOptionOpen, toggleNotificationsOptions] = useState(false);\n    const { user, board, isUserPage } = props;\n    const history = useHistory();\n\n    const logout = async () => {\n        await props.logout();\n        history.push('/')\n    }\n\n    const unreadNotificationNumber = () => {\n        if (user) {\n            if (user.notifications && user.notifications.length > 0) {\n                let notifications = user.notifications;\n                const unreadNotifications = notifications.filter(notification => {\n                    return notification.status.isSeen === false;\n                })\n                return unreadNotifications.length;\n            }\n        }\n    }\n\n    return (\n        <header style={{ backgroundColor: board ? 'rgba(0,0,0,.15)' : isUserPage ? 'rgb(5, 97, 150)' : '' }}>\n            {user && <section className=\"main-header flex align-center\">\n                <div className=\"menu-container flex align-center\">\n                    <button className=\"icon-container\">\n                        <Link to={`/user/${user._id}/boards`}><img className=\"icon\" src={Home} alt=\"home\" /></Link>\n                    </button>\n                    <div>\n                        <button className=\"icon-container\">\n                            <Link to={`/user/${user._id}/boards`}><img className=\"icon\" src={Logo} alt=\"boards\" /></Link>\n                        </button>\n                    </div>\n                    <Filter user={user} />\n                </div>\n                <div className=\"logo\">\n                    {board ?\n                        <Link to={`/treller/board/${board._id}`} className=\"logo\"><img className=\"icon\" src={Logo} alt=\"logo\" />Treller</Link>\n                        : user ? <Link to={`/user/${user._id}/boards`} className=\"logo\"><img className=\"icon\" src={Logo} alt=\"logo\" />Treller</Link>\n                            : <Link to=\"/\" className=\"logo\"><img className=\"icon\" src={Logo} alt=\"logo\" />Treller</Link>\n                    }\n                </div>\n                <div className=\"menu-container flex flex-end align-center\">\n                    <div className=\"flex relative\">\n                        {unreadNotificationNumber() ? <span className=\"notification-badge\">{unreadNotificationNumber()}</span> : ''}\n                        <button className=\"icon-container\" onClick={() => toggleNotificationsOptions(!isNotificationOptionOpen)}>\n                            <img className=\"icon\" src={Notification} alt=\"notifications\" />\n                        </button>\n                        {isNotificationOptionOpen && <Notifications\n                            closePopUp={() => toggleNotificationsOptions(false)}\n                            user={user}\n                        />}\n                    </div>\n                    {user ? <AvatarOptions user={user} onLogout={logout} />\n                    : <div>\n                        <button className=\"icon-container\">\n                            <Link to=\"/login\"><img className=\"icon\" src={LoginIcon} alt=\"login icon\" /></Link>\n                        </button>\n                    </div>}\n                </div>\n            </section>}\n        </header>\n    )\n}\n\nconst mapDispatchToProps = {\n    logout,\n    addBoard\n}\nexport const MainHeader = connect(null, mapDispatchToProps)(_MainHeader)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\boardService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\CardPreview.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\userSercvice.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\boardActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\cardActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\cardService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\eventBusService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\cardReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardComments\\CardComments.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\ListPreview.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddCard\\AddCard.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\authActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\authService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\HomePage.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\UserProfile\\UserProfile.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\Login.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\HttpService.js",["225"],"import Axios from 'axios';\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production' ?\r\n    '/api/' :\r\n    '//localhost:4000/api/'\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            this.props.history.push('/');\r\n        }\r\n        console.log(`Had issues ${method}ing to server`, err)\r\n        throw err;\r\n    }\r\n}",["226","227"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Filter\\Filter.jsx",["228"],"import { connect } from 'react-redux';\nimport { getSearchResult } from './../../store/actions/searchActions';\nimport { getBoardById } from './../../store/actions/boardActions';\nimport { Link, useLocation } from 'react-router-dom';\nimport { CardPreview } from './../CardPreview/CardPreview';\nimport { useEffect, useRef, useState } from 'react';\n\nimport './Filter.scss';\n\nexport function _Filter(props) {\n    const location = useLocation();\n    const [filterBy, setFilterBy] = useState({ txt: '' });\n    const [searchResult, setSearchResult] = useState([]);\n    const [isSearch, toggleIsSearch] = useState(false)\n    const [isFormOpen, toggleForm] = useState(false);\n    const [listTitle, setListTitle] = useState('');\n    const [boardTitle, setBoardTitle] = useState('');\n    const node = useRef();\n\n    useEffect(() => {\n        // add when mounted\n        document.addEventListener(\"mousedown\", handleClick);\n        // return function to be called when unmounted\n        return () => {\n          document.removeEventListener(\"mousedown\", handleClick);\n        };\n      }, []);\n\n      const handleClick = e => {\n        if (node.current.contains(e.target)) {\n          return;\n        }\n       toggleForm(false)\n      };\n\n    const setFilter = async (ev) => {\n        ev.preventDefault();\n        debugger\n        if (!filterBy.txt || filterBy.txt.length < 0) return;\n        let results = await props.getSearchResult(filterBy);\n        setSearchResult(results);\n        toggleIsSearch(true);\n        if (results) {\n            results.forEach(async (result) => {\n                let board = await props.getBoardById(result.createdBy.boardId);\n                let list = board.lists.find(list => {\n                    return list._id === result.createdBy.listId;\n                })\n                setBoardTitle(board.title);\n                setListTitle(list.title);\n            })\n        }\n    }\n\n    // useEffect(() => {\n    //     setFilterBy(filterBy)\n    //     return () => {\n    //         setFilterBy({ txt: '' })\n    //     }\n    // })\n\n    const closeForm = () => {\n        toggleForm(false);\n        setFilterBy({ txt: '' })\n    }\n\n    const isBoardMember = (boardId) => {\n        const isMember = props.user.boardsMember.some(board => {\n            return board._id === boardId;\n        })\n        return isMember;\n    }\n\n    // onSetBoard = async(boardId)=>{\n    //     eventBus.emit('onSetBoard', boardId)\n    // }\n    // How to set new board after click on card link //\n\n    return (\n        <section ref={node} className=\"filter\">\n            <form onSubmit={setFilter}>\n                <input type=\"search\" className=\"search-input\" name=\"txt\" value={filterBy.txt}\n                    onChange={(ev) => setFilterBy({ ...filterBy, [ev.target.name]: ev.target.value })} \n                    onFocus={() => toggleForm(true)} onBlur={closeForm} />\n                {!isFormOpen && <button type=\"button\" className=\"search-btn\"><i className=\"fa fa-search\"></i></button>}\n            </form>\n            {isFormOpen && <div className=\"search-tab pop-up\" >\n                <button onClick={closeForm} className=\"close-btn\"><i className=\"fas fa-times\"></i></button>\n                <p className=\"headline\">Search Results</p>\n                {isSearch &&\n                    <div className=\"flex justify-center\">\n                        {(searchResult && searchResult.length > 0) ? <ul>\n                            {searchResult.map(result => {\n                                if (!isBoardMember(result.createdBy.boardId)) return;\n                                return (\n                                    <li key={result._id} className=\"flex align-center\">\n                                        <div className=\"card-preview-search\">\n                                            <CardPreview card={result} isSearch={true} />\n                                        </div>\n                                        <Link to={{\n                                            pathname: `/treller/card/${result._id}`,\n                                            state: { background: location }\n                                        }}>\n                                            <h4 className=\"card-name\">{result.title}</h4>\n                                            <p className=\"list-board-name\">\n                                                In <span className=\"bold\">{listTitle} </span>\n                                                    On <span className=\"bold\">{boardTitle}</span>\n                                            </p>\n                                        </Link>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                            : <span className=\"no-result-msg\">We couldn't find any cards or boards that matched your search.</span>}\n                    </div>}\n            </div>}\n        </section>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        searchResult: state.searchReducer.searchResult\n    }\n}\nconst mapDispatchToProps = {\n    getSearchResult,\n    getBoardById\n}\nexport const Filter = connect(mapStateToProps, mapDispatchToProps)(_Filter)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\httpService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardHeader\\BoardHeader.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\img-upload-service.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddList\\AddList.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardEditModal\\CardEditModal.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\socketService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Boards\\Boards.jsx",["229"],"import { Component } from 'react';\nimport { MainHeader } from '../../cmps/MainHeader/MainHeader';\nimport Template1 from './../../assets/templates/bgc-small1.jpg';\nimport Template2 from './../../assets/templates/bgc-small2.jpg';\nimport Template3 from './../../assets/templates/bgc-small3.jpg';\nimport Template4 from './../../assets/templates/bgc-small4.jpg';\n\nimport { connect } from 'react-redux';\nimport { getLoggedInUser } from '../../store/actions/authActions';\nimport { addBoard, getBoardForBoardPage } from '../../store/actions/boardActions';\nimport { Link } from 'react-router-dom';\n\nimport './Boards.scss';\nimport Avatar from 'react-avatar';\nimport { boardService } from '../../services/boardService';\nimport { eventBus } from '../../services/eventBusService';\nimport { socketService } from '../../services/socketService';\n\nexport class _Boards extends Component {\n\n    state = {\n        favoriteBoards: [],\n        boardsMember: []\n    }\n\n    async componentDidMount() {\n        await this.props.getLoggedInUser();\n        this.getBoardsForDisplay();\n        this.getFavBoardsForDisplay();\n\n        const { user } = this.props;\n        socketService.setup();\n        socketService.emit('register user', user._id);\n        socketService.on('newUserNotification', (userId) => {\n            this.loadUser()\n        })\n        \n        eventBus.on('loadUser', ()=>{\n            this.loadUser();\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.user !== this.props.user) {\n            this.getBoardsForDisplay();\n            this.getFavBoardsForDisplay();\n        }\n    }\n\n    loadUser = async () =>{\n        await this.props.getLoggedInUser();\n    }\n\n    // Why it stops after add board? //\n    addBoard = async () => {\n        const boardToAdd = boardService.getEmptyBoard();\n        const board = await this.props.addBoard(boardToAdd);\n        eventBus.emit('onSetBoard', board._id);\n        this.props.history.push(`/treller/board/${board._id}`);\n    }\n\n    getBoardsForDisplay = async () => {\n        let { user } = this.props;\n        if (user) {\n            if (user.boardsMember && user.boardsMember.length > 0) {\n                let boards = await Promise.all(user.boardsMember.map(async (boardId) => {\n                    return boardId = await this.props.getBoardForBoardPage(boardId);\n                }))\n                this.setState({ boardsMember: boards })\n            }\n        }\n    }\n\n    getFavBoardsForDisplay = async () => {\n        let { user } = this.props;\n        if (user) {\n            if (user.favoriteBoards && user.favoriteBoards.length > 0) {\n                let boards = await Promise.all(user.favoriteBoards.map(async (boardId) => {\n                    return boardId = await this.props.getBoardForBoardPage(boardId);\n                }))\n                this.setState({ favoriteBoards: boards })\n            }\n        }\n    }\n\n    render() {\n        const { user } = this.props;\n        const { favoriteBoards, boardsMember } = this.state;\n        const templates = [\n            {\n                name: 'Nature', boardId: \"5ff1b13c36eed552e70fec47\",\n                smallImg: Template1, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large1_kxtkq8.jpg\"\n            },\n            {\n                name: 'Animals', boardId: \"60040605a5297b5978123a93\",\n                smallImg: Template2, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large4_b6g9p0.jpg\"\n            },\n            {\n                name: 'Work', boardId: \"600432fba5297b59781ba1d4\",\n                smallImg: Template3, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1613425888/treller/bgc-large3_hxzpue.jpg\"\n            },\n            {\n                name: 'Relax', boardId: \"60197399331a92cde9ce9f7d\",\n                smallImg: Template4, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large2_zr62xq.jpg\"\n            }\n        ];\n\n        return (\n            <section>\n                {user && <MainHeader isUserPage={true} user={user} />}\n                {user && <section className=\"boards container\">\n                    <div className=\"boards-container\">\n                        <div className=\"flex justify-center align-center\"><i className=\"fas fa-columns\"></i><h2>Treller Templates</h2></div>\n                        <p className=\"template-info\"><span className=\"bold\">Create your own board with our new template.</span>\n                            <br /> Manage and monitoring your board, easily with Treller Templates! </p>\n                        <ul className=\"flex justify-center flex-wrap\">\n                            {templates.map(template => {\n                                return (\n                                    <Link to={`/treller/board/${template.boardId}`} className=\"template-img\" style={{ backgroundImage: `url(${template.smallImg})` }}\n                                        key={template.name}>\n                                        <span>Template</span>\n                                        <h2 className=\"template-name\">{template.name}</h2>\n                                    </Link>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"user-boards-container\">\n                        {(user.favoriteBoards && user.favoriteBoards.length > 0) && <div className=\"boards-container\">\n                            <div className=\"flex justify-center align-center\"><i className=\"far fa-star\"></i><h2>Starred Boards</h2></div>\n                            <div className=\"starred-boards flex justify-center flex-wrap\">\n                                {favoriteBoards.map(board => {\n                                    return (\n                                        <Link to={`/treller/board/${board._id}`} key={board._id}\n                                            className=\"board-link flex column space-between\"\n                                            style={{\n                                                backgroundColor: board.style.backgroundColor ? board.style.backgroundColor : ''\n                                                , backgroundImage: board.style.backgroundImg ? `url(${board.style.backgroundImg})` : ''\n                                            }}>\n                                            {board.title}\n                                            <div className=\"flex space-between\">\n                                                <button className=\"fav-board\"><i style={{ color: \"#f2d600\" }} className=\"far fa-star\"></i></button>\n                                                <div className=\"flex flex-end\">\n                                                    {board.members.map(member => {\n                                                        return (\n                                                            <Avatar name={member.fullName} size={20} round={true} key={member._id} />\n                                                        )\n                                                    })}\n                                                </div>\n                                            </div>\n                                        </Link>\n                                    )\n                                })}\n                            </div>\n                        </div>}\n                        <div className=\"boards-container\">\n                            <div className=\"flex justify-center align-center\"><i className=\"fab fa-trello\"></i><h2>Your Boards</h2></div>\n                            <div className=\"flex justify-center\">\n                                {(user.boardsMember && user.boardsMember.length > 0) &&\n                                    <div className=\"other-boards flex justify-center flex-wrap\">\n                                        {boardsMember.map(board => {\n                                            if (!board.style) return;\n                                                return (\n                                                    <Link to={`/treller/board/${board._id}`} key={board._id}\n                                                        className=\"board-link flex column space-between\"\n                                                        style={{\n                                                            backgroundColor: board.style.backgroundColor ? board.style.backgroundColor : '',\n                                                            backgroundImage: board.style.backgroundImg ? `url(${board.style.backgroundImg})` : ''\n                                                        }}>\n                                                        {board.title}\n                                                        <div className=\"flex flex-end\">\n                                                            {board.members.map(member => {\n                                                                return (\n                                                                    <Avatar name={member.fullName} size={20} round={true} key={member._id} />\n                                                                )\n                                                            })}\n                                                        </div>\n                                                    </Link>\n                                                )\n                                        })}\n                                    </div>}\n                                <div className=\"board-link empty flex justify-center align-center\"\n                                    onClick={this.addBoard}>\n                                    Create new board\n                                        </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>}\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.loggedInUser,\n        // card: state.cardReducer.currCard,\n        // board: state.boardReducer.currBoard\n    }\n}\nconst mapDispatchToProps = {\n    getLoggedInUser,\n    addBoard,\n    getBoardForBoardPage\n}\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\CardDetails.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\utilService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardChecklists\\CardChecklists.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\searchService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\searchReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\searchActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardDescription\\CardDescription.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\InviteMembers\\InviteMembers.jsx",["230"],"import { useEffect, useRef, useState } from 'react';\nimport Avatar from 'react-avatar';\nimport { connect } from 'react-redux';\nimport { getUsers } from '../../store/actions/userActions';\n\nimport './InviteMembers.scss';\n\nfunction _InviteMembers(props) {\n    const [filter, setFilter] = useState({txt: ''});\n    const [isInvitePopUpOpen, togglePopUp] = useState(false);\n    const [searchResult, setSearchResult] = useState([])\n\n    const node = useRef();\n\n    useEffect(() => {\n        // add when mounted\n        document.addEventListener(\"mousedown\", handleClick);\n        // return function to be called when unmounted\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClick);\n        };\n    }, []);\n\n    const handleClick = e => {\n        if (node.current.contains(e.target)) {\n            return;\n        }\n        togglePopUp();\n\n    };\n \n    const filterUsers = async (filter) => {\n        const res = await props.getUsers(filter);\n        setSearchResult(res);\n    }\n\n    const onInviteMember = (member) => {\n        if (this.isMember(member._id)) return;\n        togglePopUp(false);\n        props.inviteMemberToBoard(member);\n    }\n\n    const isMember = (userId) => {\n        const { board } = props;\n        const isMember = board.members.some(member => {\n            return member._id === userId\n        })\n        return isMember;\n    }\n\n    const isUser = (userId) => {\n        const { user } = props;\n        if (user._id === userId) return true;\n        else return false;\n    }\n\n        return (\n            <section ref={node} className=\"invite-container\" >\n                <button onClick={()=>togglePopUp(!isInvitePopUpOpen)} className=\"board-header-icon invite-btn\">Invite</button>\n                { isInvitePopUpOpen && <div className=\"invite pop-up\">\n                    <button onClick={()=>togglePopUp(false)} className=\"close-btn\"><i className=\"fas fa-times\"></i></button>\n                    <p className=\"headline\">Invite</p>\n                    <form onSubmit={filterUsers} className=\"invite-form\">\n                        <input className=\"invite-search\" type=\"search\" name=\"txt\" \n                        onChange={(ev)=>setFilter({...filter, [ev.target.name]: ev.target.value})} value={filter.txt}\n                            placeholder=\"Enter full name or user name\" />\n                        <button className=\"search-btn\">\n                            <i className=\"fa fa-search search-icon\"></i>\n                        </button>\n                    </form>\n                    {(searchResult && searchResult.length > 0) && <div>\n                        <ul className=\"result-container\">\n                            {searchResult.map(user => {\n                                if (isUser(user._id)) return;\n                                return (\n                                    <li onClick={() => onInviteMember(user)}\n                                        className={`flex align-center ${isMember(user._id) ? 'already-member' : ''}`}\n                                        title={`${this.isMember(user._id) ? 'This user is already a member in this board' : ''}`}\n                                        key={user._id}>\n                                        <Avatar name={user.fullName} size={20} round={true} />\n                                        <span className=\"user-name\">{user.fullName}</span>\n                                    </li>)\n                            })}\n                        </ul>\n                    </div>}\n                </div>}\n            </section>\n        )\n}\n\nconst mapDispatchToProps = {\n    getUsers\n}\n\nexport const InviteMembers = connect(null, mapDispatchToProps)(_InviteMembers)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardOptions\\CardOptions.jsx",["231"],"import { useEffect, useRef, useState } from 'react';\nimport Avatar from 'react-avatar';\n\nimport './CardOptions.scss';\n\n\nexport function CardOptions(props) {\n    const [checklist, newChecklist] = useState({ title: '', todos: [] });\n    const [date, setDate] = useState(props.card.dueDate);\n    const { type, board, card } = props;\n    const node = useRef();\n\n    useEffect(() => {\n        // add when mounted\n        document.addEventListener(\"mousedown\", handleClick);\n        // return function to be called when unmounted\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClick);\n        };\n    }, []);\n\n    const handleClick = e => {\n        if (node.current.contains(e.target)) {\n            return;\n        }\n        props.closePopUp();\n\n    };\n\n    const closePopUp = () => {\n        props.closePopUp();\n    }\n\n    const isMember = (userId) => {\n        const isMember = card.members.some(member => {\n            return member._id === userId;\n        })\n        return isMember;\n    }\n\n    const addMember = (member)=>{\n        if(isMember(member._id)) return;\n        props.func(member);\n    }\n\n    return (\n        <div ref={node} className=\"card-options\">\n            <button className=\"close-btn\" onClick={closePopUp}><i className=\"fas fa-times\"></i></button>\n            {type === 'Cover' && <div className=\"covers\">\n                <p className=\"headline-option\">{props.type}</p>\n                <p>Colors</p>\n                <ul className=\"flex wrap justify-center\">\n                    <li className=\"cover color green\" onClick={() => props.func({ color: 'green' })}></li>\n                    <li className=\"cover color yellow\" onClick={() => props.func({ color: 'yellow' })}></li>\n                    <li className=\"cover color orange\" onClick={() => props.func({ color: 'orange' })}></li>\n                    <li className=\"cover color red\" onClick={() => props.func({ color: 'red' })}></li>\n                    <li className=\"cover color purple\" onClick={() => props.func({ color: 'purple' })}></li>\n                    <li className=\"cover color blue\" onClick={() => props.func({ color: 'blue' })}></li>\n                    <li className=\"cover color pink\" onClick={() => props.func({ color: 'pink' })}></li>\n                </ul>\n                <p>Pictures</p>\n                <ul className=\"flex wrap justify-center\">\n                    <li className=\"cover pic pic1\" onClick={() => props.func({ picture: 'pic1' })}></li>\n                    <li className=\"cover pic pic2\" onClick={() => props.func({ picture: 'pic2' })}></li>\n                    <li className=\"cover pic pic3\" onClick={() => props.func({ picture: 'pic3' })}></li>\n                    <li className=\"cover pic pic4\" onClick={() => props.func({ picture: 'pic4' })}></li>\n                    <li className=\"cover pic pic5\" onClick={() => props.func({ picture: 'pic5' })}></li>\n                    <li className=\"cover pic pic6\" onClick={() => props.func({ picture: 'pic6' })}></li>\n                    <li className=\"cover pic pic7\" onClick={() => props.func({ picture: 'pic7' })}></li>\n                </ul>\n            </div>}\n            {type === 'Members' && <div className=\"members-container\">\n                <p className=\"headline-option\">{type}</p>\n                <p className=\"add-members-info\">Add members to card:</p>\n                {board.members && <ul>\n                    {board.members.map(member => {\n                        return (\n                            <li onClick={() => addMember(member)}\n                                className={`member flex align-center ${isMember(member._id) ? 'already-member' : ''}`} key={member._id}\n                                title={`${isMember(member._id) ? 'This user is already a member in this card' : ''}`}>\n                                <Avatar className=\"avatar-logo\" name={member.fullName} round={true}\n                                    size={30} />\n                                {member.fullName}\n                            </li>)\n                    })}\n                </ul>}\n            </div>}\n            {type === 'Labels' && <div className=\"labels-container\">\n                <p className=\"headline-option\">{props.type}</p>\n                <div className=\"labels\">\n                    <ul className=\"flex column align-center\">\n                        <li className=\"label green\" onClick={() => props.func('green')}></li>\n                        <li className=\"label yellow\" onClick={() => props.func('yellow')}></li>\n                        <li className=\"label orange\" onClick={() => props.func('orange')}></li>\n                        <li className=\"label red\" onClick={() => props.func('red')}></li>\n                        <li className=\"label purple\" onClick={() => props.func('purple')}></li>\n                        <li className=\"label blue\" onClick={() => props.func('blue')}></li>\n                    </ul>\n                </div>\n            </div>}\n            {type === 'Checklists' && <div className=\"checklists-container\">\n                <p className=\"headline-option\">{props.type}</p>\n                <form onSubmit={(ev) => props.func(ev, checklist)}>\n                    <input type=\"text\" name=\"title\" value={checklist.title} className=\"checklist-add-input\"\n                        onChange={(ev) => newChecklist({ ...checklist, [ev.target.name]: ev.target.value })}\n                        placeholder=\"Add Checklist\" />\n                    <br />\n                    <button className=\"save-btn\">Add</button>\n                </form>\n            </div>}\n            {type === 'Due Date' && <div className=\"due-date-form\">\n                <p className=\"headline-option\">{props.type}</p>\n                <form onSubmit={(ev) => props.func(ev, date)}>\n                    <input type=\"datetime-local\" value={date} name=\"dueDate\"\n                        onChange={(ev) => setDate(ev.target.value)} />\n                    <br />\n                    <button className=\"save-btn\">Add</button>\n                </form>\n            </div>}\n        </div>)\n}","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Notifications\\Notifications.jsx",["232"],"import { useEffect, useRef, useState } from 'react';\nimport { eventBus } from '../../services/eventBusService';\nimport { connect } from 'react-redux';\nimport { addMemberToBoard } from '../../store/actions/boardActions';\nimport { updateUserCollection } from '../../store/actions/userActions';\nimport './Notifications.scss';\n\nexport function _Notifications(props) {\n    const [showMoreNum, showMore] = useState(3);\n    const node = useRef();\n\n    useEffect(() => {\n        // add when mounted\n        document.addEventListener(\"mousedown\", handleClick);\n        // return function to be called when unmounted\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClick);\n        };\n    }, []);\n\n    const handleClick = e => {\n        if (node.current.contains(e.target)) {\n            return;\n        }\n        props.closePopUp();\n\n    };\n\n    const onApprove = async (notification, notificationIdx) => {\n        let notifications = props.user.notifications;\n        notification.status = { isSeen: true, msg: 'You approve the invitation' };\n        notifications.splice(notificationIdx, 1, notification)\n        await props.updateUserCollection(props.user._id, { notifications })\n        await props.addMemberToBoard(notification.id, props.user);\n        eventBus.emit('loadUser');\n    }\n\n    const onDecline = async (notification, notificationIdx) => {\n        let notifications = props.user.notifications;\n        notification.status = { isSeen: true, msg: 'You decline the invitation' };\n        notifications.splice(notificationIdx, 1, notification)\n        await props.updateUserCollection(props.user._id, { notifications })\n    }\n\n    const notificationsToDisplay = () => {\n        let notifications = props.user.notifications;\n        if (notifications.length > 3) {\n            return notifications.slice(0, showMoreNum);\n        }\n    }\n\n    return (\n        <div className=\"notifications-container\" ref={node}>\n            <button onClick={props.closePopUp} className=\"close-btn\"><i className=\"fas fa-times\"></i></button>\n            <p className=\"headline\">Notifications</p>\n            {props.user.notifications &&\n                <ul>\n                    {notificationsToDisplay().map((notification, idx) => {\n                        return <li className=\"notification\" key={idx}>\n                            {!notification.status.isSeen && <i className=\"fas fa-circle circle\"></i>}\n                            <p className=\"notification-message\">{notification.message}</p>\n                            {!notification.status.isSeen ? <div>\n                                <button className=\"notification-action approve\"\n                                    onClick={() => onApprove(notification, idx)}>Approve</button>\n                                <button className=\"notification-action decline\"\n                                    onClick={() => onDecline(notification, idx)}>Decline</button>\n                            </div>\n                                : <p className=\"notification-status bold\">{notification.status.msg}</p>}\n                            {/* <Link to={`/treller/board/${notification.id}`}>\n                                        {`${notification.message}`}\n                                    </Link> */}\n                        </li>\n                    })}\n                    <li className=\"show-more\" onClick={() => showMore(showMoreNum + 3)}>...</li>\n                </ul>}\n            {!props.user.notifications &&\n                <span>No notifications yet...</span>}\n        </div>)\n}\n\nconst mapDispatchToProps = {\n    addMemberToBoard,\n    updateUserCollection\n}\nexport const Notifications = connect(null, mapDispatchToProps)(_Notifications)\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\NotificiationMsg\\NotificiationMsg.jsx",["233","234"],"import { useEffect, useState } from 'react';\nimport './NotificiationMsg.scss';\n\nexport function NotificiationMsg({ notification, user }) {\n    const [isTimePass, setTime] = useState(false)\n    let interval = null;\n\n    useEffect(() => {\n        interval = setTimeout(() => {\n            setTime(true)\n        }, 4000);\n    }, []);\n\n    const isUser = () => {\n        if (notification.byUser) {\n            if (notification.byUser.id === user._id) return true;\n            else return false;\n        }\n    }\n\n    return (\n        <section>\n            {(notification && !isTimePass) && <div className=\"notification-msg\">\n                <p>{`${notification.message} ${notification.byUser ? 'by' : ''} ${isUser ? 'You' : notification.user.fullName}`}</p>\n            </div>}\n        </section>\n    )\n}\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardMenu\\BoardMenu.jsx",["235"],"import { useEffect, useRef, useState } from 'react';\nimport Avatar from 'react-avatar';\nimport './BoardMenu.scss';\n\nexport function BoardMenu(props) {\n    const [description, setDescription] = useState(props.board.description)\n    const [menuType, toggleMenuType] = useState('');\n    const [onForm, toggleOnForm] = useState(false);\n    const node = useRef()\n\n    useEffect(() => {\n        // add when mounted\n        document.addEventListener(\"mousedown\", handleClick);\n        // return function to be called when unmounted\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClick);\n        };\n    }, []);\n\n    const handleClick = e => {\n        if (node.current.contains(e.target)) {\n            return;\n        }\n        props.closeMenu();\n    };\n\n    return (\n        <section ref={node} className=\"board-menu pop-up\">\n            {menuType === '' && <div>\n                <button onClick={props.closeMenu} className=\"close-btn\"><i className=\"fas fa-times\"></i></button>\n                <p className=\"headline\">Menu</p>\n                <div className=\"main-menu\">\n                    <ul>\n                        <li onClick={() => toggleMenuType('about')}><i className=\"fab fa-trello\"></i>\n                            <p className=\"menu-option\">About Board</p>\n                        </li>\n                        <li className=\"relative\" onClick={() => toggleMenuType('style')}>\n                            <div className=\"color-sample\" style={{ backgroundColor: props.board.style.backgroundColor }}></div>\n                            <p className=\"menu-option\">Change Style</p>\n                        </li>\n                        {props.isAdmin && <li onClick={props.onDeleteBoard}>\n                            <i className=\"fas fa-trash\"></i>\n                            <p className=\"menu-option\">Delete Board</p>\n                        </li>}\n                    </ul>\n                </div>\n            </div>}\n            {menuType === 'about' && <div className=\"about-board-container\">\n                <button className=\"go-back\" onClick={() => toggleMenuType('')}><i className=\"fas fa-arrow-left\"></i></button>\n                <p className=\"headline\">About Board</p>\n                <div className=\"about-board\">\n                    <button className=\"no-button\"><i className=\"fas fa-user\"></i></button><p className=\"bold inline\">Created by</p>\n                    <div className=\"relative\">\n                        <Avatar className=\"avatar-member-popup\" name={props.user.fullName} size=\"40\" round={true} />\n                        <p className=\"full-name flex\">{props.user.fullName}</p>\n                        <p className=\"user-name flex\">{props.user.userName}</p>\n                    </div>\n                    <button className=\"no-button\"><i className=\"fas fa-align-left icon\"></i></button><p className=\"bold inline\">Description</p>\n                    <form onSubmit={(ev) => props.onUpdateBoardDescription(ev, description)}>\n                        <textarea className=\"board-description\" name=\"description\" onChange={(ev) => setDescription(ev.target.value)}\n                            value={description}\n                            placeholder=\"Write here your board description...\" onFocus={() => toggleOnForm(true)}></textarea>\n                        {onForm && <button className=\"description-save-btn\">Save</button>}\n                    </form>\n                </div>\n            </div>}\n            {menuType === 'style' && <div className=\"style-change-container\">\n                <button className=\"go-back\" onClick={() => toggleMenuType('')}><i className=\"fas fa-arrow-left\"></i></button>\n                <p className=\"headline\">Change Style</p>\n                <div className=\"style-change flex\">\n                    <div onClick={() => props.onChangeStyle('rgb(0, 121, 191)')} className=\"color-picker blue\" ></div>\n                    <div onClick={() => props.onChangeStyle('rgb(81, 152, 57)')} className=\"color-picker green\" ></div>\n                    <div onClick={() => props.onChangeStyle('rgb(210, 144, 52)')} className=\"color-picker orange\" ></div>\n                    <div onClick={() => props.onChangeStyle('rgb(176, 70, 50)')} className=\"color-picker red\" ></div>\n                    <div onClick={() => props.onChangeStyle('rgb(137, 96, 158)')} className=\"color-picker purple\" ></div>\n                </div>\n            </div>}\n        </section>\n    )\n}\n\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AvatarOptions\\AvatarOptions.jsx",[],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":5,"column":10,"nodeType":"242","messageId":"243","endLine":5,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":10,"column":1,"nodeType":"246","endLine":23,"endColumn":2},{"ruleId":"236","replacedBy":"247"},{"ruleId":"238","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":94,"column":79,"nodeType":"251","messageId":"252","endLine":94,"endColumn":86},{"ruleId":"249","severity":1,"message":"250","line":162,"column":63,"nodeType":"251","messageId":"252","endLine":162,"endColumn":70},{"ruleId":"249","severity":1,"message":"250","line":74,"column":55,"nodeType":"251","messageId":"252","endLine":74,"endColumn":62},{"ruleId":"253","severity":1,"message":"254","line":20,"column":8,"nodeType":"255","endLine":20,"endColumn":10,"suggestions":"256"},{"ruleId":"253","severity":1,"message":"254","line":19,"column":8,"nodeType":"255","endLine":19,"endColumn":10,"suggestions":"257"},{"ruleId":"240","severity":1,"message":"258","line":9,"column":9,"nodeType":"242","messageId":"243","endLine":9,"endColumn":17},{"ruleId":"253","severity":1,"message":"259","line":9,"column":20,"nodeType":"260","endLine":11,"endColumn":17},{"ruleId":"253","severity":1,"message":"254","line":18,"column":8,"nodeType":"255","endLine":18,"endColumn":10,"suggestions":"261"},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["262"],["263"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.","ArrayExpression",["264"],["265"],"'interval' is assigned a value but never used.","Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["266"],"no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},{"desc":"267","fix":"269"},{"desc":"267","fix":"270"},"Update the dependencies array to be: [handleClick]",{"range":"271","text":"272"},{"range":"273","text":"272"},{"range":"274","text":"272"},[633,635],"[handleClick]",[716,718],[634,636]]