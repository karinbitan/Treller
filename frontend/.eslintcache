[{"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\index.js":"1","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\App.jsx":"3","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\TrellerApp\\TrellerApp.jsx":"4","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeader\\MainHeader.jsx":"5","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\boardService.js":"6","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\index.js":"7","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\CardPreview.jsx":"8","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\userSercvice.js":"9","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\index.js":"10","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\userReducer.js":"11","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\boardReducer.js":"12","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\boardActions.js":"13","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\userActions.js":"14","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\cardActions.js":"15","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\cardService.js":"16","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\eventBusService.js":"17","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\cardReducer.js":"18","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardComments\\CardComments.jsx":"19","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\ListPreview.jsx":"20","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddCard\\AddCard.jsx":"21","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\index.js":"22","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\authActions.js":"23","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\authService.js":"24","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\index.js":"25","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\HomePage.jsx":"26","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\UserProfile\\UserProfile.jsx":"27","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\index.js":"28","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\Login.jsx":"29","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\HttpService.js":"30","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeaderOptions\\MainHeaderOptions.jsx":"31","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Filter\\Filter.jsx":"32","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\httpService.js":"33","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardHeader\\BoardHeader.jsx":"34","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\img-upload-service.js":"35","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardOptionsPopUp\\CardOptions.jsx":"36","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddList\\AddList.jsx":"37","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardEditModal\\CardEditModal.jsx":"38","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\socketService.js":"39","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Boards\\Boards.jsx":"40","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\index.js":"41","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\CardDetails.jsx":"42","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\utilService.js":"43","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardChecklists\\CardChecklists.jsx":"44","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\searchService.js":"45","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\searchReducer.js":"46","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\searchActions.js":"47","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardDescription\\CardDescription.jsx":"48","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\InviteMembers\\InviteMembers.jsx":"49"},{"size":628,"mtime":1612358192232,"results":"50","hashOfConfig":"51"},{"size":362,"mtime":499162500000,"results":"52","hashOfConfig":"51"},{"size":1496,"mtime":1612430830068,"results":"53","hashOfConfig":"51"},{"size":15165,"mtime":1612888018922,"results":"54","hashOfConfig":"51"},{"size":5466,"mtime":1612877139876,"results":"55","hashOfConfig":"51"},{"size":1718,"mtime":1612886728357,"results":"56","hashOfConfig":"51"},{"size":43,"mtime":1612371711218,"results":"57","hashOfConfig":"51"},{"size":4471,"mtime":1612889685865,"results":"58","hashOfConfig":"51"},{"size":802,"mtime":1612704246037,"results":"59","hashOfConfig":"51"},{"size":622,"mtime":1612634555157,"results":"60","hashOfConfig":"51"},{"size":808,"mtime":1611419372036,"results":"61","hashOfConfig":"51"},{"size":866,"mtime":1612285115077,"results":"62","hashOfConfig":"51"},{"size":3216,"mtime":1612886692014,"results":"63","hashOfConfig":"51"},{"size":636,"mtime":1612705731626,"results":"64","hashOfConfig":"51"},{"size":3339,"mtime":1612689415566,"results":"65","hashOfConfig":"51"},{"size":2216,"mtime":1612885399799,"results":"66","hashOfConfig":"51"},{"size":405,"mtime":1611829576251,"results":"67","hashOfConfig":"51"},{"size":803,"mtime":1610531875309,"results":"68","hashOfConfig":"51"},{"size":4064,"mtime":1612687378288,"results":"69","hashOfConfig":"51"},{"size":5736,"mtime":1612879532603,"results":"70","hashOfConfig":"51"},{"size":2373,"mtime":1612879518616,"results":"71","hashOfConfig":"51"},{"size":43,"mtime":1610295231626,"results":"72","hashOfConfig":"51"},{"size":897,"mtime":1611420341440,"results":"73","hashOfConfig":"51"},{"size":1845,"mtime":1612171320650,"results":"74","hashOfConfig":"51"},{"size":37,"mtime":1610806879811,"results":"75","hashOfConfig":"51"},{"size":1491,"mtime":1612883106430,"results":"76","hashOfConfig":"51"},{"size":4112,"mtime":1612709617719,"results":"77","hashOfConfig":"51"},{"size":31,"mtime":1610635323448,"results":"78","hashOfConfig":"51"},{"size":3541,"mtime":1612439339772,"results":"79","hashOfConfig":"51"},{"size":981,"mtime":1611227424023,"results":"80","hashOfConfig":"51"},{"size":1112,"mtime":1612888258739,"results":"81","hashOfConfig":"51"},{"size":4318,"mtime":1612884066969,"results":"82","hashOfConfig":"51"},{"size":1078,"mtime":1612615853947,"results":"83","hashOfConfig":"51"},{"size":6258,"mtime":1612888510320,"results":"84","hashOfConfig":"51"},{"size":691,"mtime":1606326671170,"results":"85","hashOfConfig":"51"},{"size":5236,"mtime":1612712938046,"results":"86","hashOfConfig":"51"},{"size":1996,"mtime":1612889120181,"results":"87","hashOfConfig":"51"},{"size":1976,"mtime":1612889450377,"results":"88","hashOfConfig":"51"},{"size":549,"mtime":1612195322523,"results":"89","hashOfConfig":"51"},{"size":8312,"mtime":1612883829240,"results":"90","hashOfConfig":"51"},{"size":43,"mtime":1612372825483,"results":"91","hashOfConfig":"51"},{"size":14843,"mtime":1612882887481,"results":"92","hashOfConfig":"51"},{"size":632,"mtime":1612606427715,"results":"93","hashOfConfig":"51"},{"size":4355,"mtime":1612695355979,"results":"94","hashOfConfig":"51"},{"size":357,"mtime":1612633487698,"results":"95","hashOfConfig":"51"},{"size":299,"mtime":1612634904931,"results":"96","hashOfConfig":"51"},{"size":352,"mtime":1612687420399,"results":"97","hashOfConfig":"51"},{"size":2385,"mtime":1612696446692,"results":"98","hashOfConfig":"51"},{"size":3201,"mtime":1612777377411,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1lrwrja",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\index.js",[],["209","210"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\App.jsx",["211","212","213","214"],"// import { BrowserRouter as Router, Route, Switch, useLocation, } from 'react-router-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\n\nimport { HomePage } from './pages/HomePage';\nimport { TrellerApp } from './pages/TrellerApp/TrellerApp';\nimport { CardDetails } from './pages/CardDetails';\nimport { UserProfile } from './pages/UserProfile/UserProfile';\nimport { Login } from './pages/Login';\nimport { Boards } from './pages/Boards/Boards';\n\nimport './App.scss';\nimport { _CardDetails } from \"./pages/CardDetails/CardDetails\";\n\n\nexport default function ModalGalleryExample() {\n  return (\n    <Router>\n      <App />\n    </Router>\n  );\n}\n\nfunction App() {\n  const location = useLocation();\n  const background = location.state && location.state.background;\n\n  return (\n    <section className=\"App\">\n        <Switch location={background || location}>\n          <Route exact component={HomePage} path=\"/\"></Route>\n          <Route component={Login} path=\"/login\"></Route>\n          <Route component={Boards} path=\"/user/:id/boards\"></Route>\n          <Route component={UserProfile} path=\"/user/:id\"></Route>\n          <Route component={TrellerApp} path=\"/treller/board/:id\"></Route>\n          <Route component={CardDetails} path=\"/treller/card/:id\"></Route>\n        </Switch>\n        {background && <Route component={CardDetails} path=\"/treller/card/:id\"></Route>}\n    </section >\n  );\n}\n\n// export default App;\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\TrellerApp\\TrellerApp.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeader\\MainHeader.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\boardService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardPreview\\CardPreview.jsx",["215","216","217"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\userSercvice.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\boardActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\cardActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\cardService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\eventBusService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\cardReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardComments\\CardComments.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\ListPreview.jsx",["218"],"import { Component } from 'react'\nimport { Draggable } from 'react-beautiful-dnd';\n// import { connect } from 'react-redux';\n// import { getBoardById } from '../../store/actions/boardActions';\n// import { addCard } from '../../store/actions/cardActions';\n\nimport { AddCard } from '../AddCard/AddCard';\nimport { CardPreview } from '../CardPreview';\n\n\nimport './ListPreview.scss'\n\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\n// //\n// const getListStyle = isDraggingOver => ({\n//     background: isDraggingOver ? '#6a7eb4' : '#ebecf0',\n//     // display: 'flex',\n// });\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n\n    // change background colour if dragging\n    background: isDragging ? '' : '#ebecf0',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n});\n//\n\nexport class ListPreview extends Component {\n\n    state = {\n        listToEdit: null,\n        listActionOpen: false\n    }\n\n    componentDidMount() {\n        const listToEdit = this.props.list;\n        this.setState({ listToEdit });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.list !== this.props.list) {\n            const listToEdit = this.props.list;\n            this.setState({ listToEdit });\n        }\n    }\n\n\n    handleChange = ({ target }) => {\n        const field = target.name;\n        const value = target.value;\n        this.setState(prevState => ({ listToEdit: { ...prevState.listToEdit, [field]: value } }));\n    }\n\n    onEnterPress = (ev) => {\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\n            ev.preventDefault();\n            this.changeListTitle(ev);\n            this.handleChange(ev);\n        }\n    }\n\n    changeListTitle = (ev) => {\n        ev.preventDefault();\n        this.props.onUpdateList(this.state.listToEdit);\n        this.myTextareaRef.blur();\n    }\n\n    onDeleteList = () => {\n        const { list } = this.props;\n        this.props.onDeleteList(list);\n        this.setState({ listActionOpen: false });\n    }\n\n    // MODALS //\n    toggleListOptionModel = (ev) => {\n        ev.stopPropagation();\n        this.setState({ listActionOpen: !this.state.listActionOpen })\n    }\n\n    closeListOptionModel = (ev) => {\n        ev.stopPropagation();\n        this.setState({ listActionOpen: false })\n    }\n\n    // CARD //\n    onDeleteCard = (cardId) => {\n        this.props.onDeleteCard(this.props.listIdx, cardId);\n    }\n\n    onUpdateCard = (card) => {\n        this.props.onUpdateCard(card);\n    }\n\n    render() {\n        const { list, listIdx, board } = this.props;\n        const { provided, innerRef, isDraggingOver } = this.props;\n        const { listToEdit, listActionOpen } = this.state;\n        return (\n            <section className=\"list-preview\">\n                {listToEdit && <form onSubmit={this.changeListTitle} >\n                    <textarea ref={el => this.myTextareaRef = el} className=\"list-title\" name=\"title\" value={listToEdit.title}\n                        onChange={this.handleChange} onKeyDown={this.onEnterPress}>\n                    </textarea>\n                </form>}\n                <button onClick={this.toggleListOptionModel} className=\"list-menu-icon\"><i className=\"fas fa-ellipsis-h\"></i></button>\n                {listActionOpen && <div className=\"list-actions\">\n                    <p>List Actions</p>\n                    <ul>\n                        <li onClick={this.onDeleteList}>Delete List</li>\n                    </ul>\n                    <button className=\"close-btn\" onClick={this.closeListOptionModel}>X</button>\n                </div>}\n                {list.cards && <div className={\"card-container\" + (isDraggingOver ? \" isDraggingOver\" : \"\")}\n                    {...provided.droppableProps}\n                    ref={innerRef}>\n                    {list.cards.map((card, idx) => {\n                        if (card) {\n                            return (\n                                <Draggable draggableId={card._id} key={card._id} index={idx}>\n                                    {(provided, snapshot) => (\n                                        <div className=\"card\"\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}\n                                            ref={provided.innerRef}>\n                                            <CardPreview card={card}\n                                                listIdx={listIdx}\n                                                key={card._id}\n                                                list={list}\n                                                onDeleteCard={this.onDeleteCard}\n                                                onUpdateCard={this.onUpdateCard} />\n                                        </div>\n                                    )}\n                                </Draggable>\n                            )\n                        }\n                    })}\n                    {provided.placeholder}\n                </div>}\n\n                {/* <CardList list={list} cards={list.cards} idx={idx} key={list._id} /> */}\n                <AddCard boardId={board._id} listId={list._id} listIdx={listIdx} />\n            </section >\n        )\n    }\n}","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddCard\\AddCard.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\ListPreview\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\authActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\authService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\HomePage\\HomePage.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\UserProfile\\UserProfile.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Login\\Login.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\HttpService.js",["219"],"import Axios from 'axios';\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production' ?\r\n    '/api/' :\r\n    '//localhost:4000/api/'\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            this.props.history.push('/');\r\n        }\r\n        console.log(`Had issues ${method}ing to server`, err)\r\n        throw err;\r\n    }\r\n}",["220","221"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\MainHeaderOptions\\MainHeaderOptions.jsx",["222","223","224"],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\Filter\\Filter.jsx",["225"],"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getSearchResult } from './../../store/actions/searchActions';\nimport { getBoardById } from './../../store/actions/boardActions';\nimport { Link } from 'react-router-dom';\nimport { CardPreview } from './../CardPreview/CardPreview';\n\nimport './Filter.scss';\nimport { eventBus } from '../../services/eventBusService';\n\nexport class _Filter extends Component {\n\n    state = {\n        filterBy: {\n            txt: ''\n        },\n        isFormOpen: false,\n        searchResult: [],\n        isSearch: false,\n        listTitle: '',\n        boardTitle: ''\n    }\n\n    toggleForm = () => {\n        this.setState({ isFormOpen: !this.state.isFormOpen })\n    }\n\n    openForm = () => {\n        this.setState({ isFormOpen: true })\n    }\n\n    closeForm = () => {\n        this.setState({ isFormOpen: false })\n    }\n\n\n    handleChange = ({ target }) => {\n        const field = target.name;\n        const value = target.value;\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [field]: value } }));\n    }\n\n    setFilter = async (ev) => {\n        ev.preventDefault();\n        let results = await this.props.getSearchResult(this.state.filterBy);\n        this.setState({ searchResult: results })\n        this.setState({ isSearch: true })\n        results.forEach(async (result) => {\n            let board = await this.props.getBoardById(result.createdBy.boardId);\n            let list = board.lists.find(list =>{\n               return list._id === result.createdBy.listId;\n            })\n            this.setState({ boardTitle: board.title })\n            this.setState({ listTitle: list.title })\n        })\n    }\n\n    // onSetBoard = async(boardId)=>{\n    //     eventBus.emit('onSetBoard', boardId)\n    // }\n// How to set new board after click on card link //\n\n    render() {\n        const { isFormOpen, searchResult, isSearch, listTitle, boardTitle } = this.state;\n        return (\n            <section className=\"filter\">\n                <form onSubmit={this.setFilter}>\n                    <input type=\"search\" className=\"search-input\" name=\"txt\"\n                        onChange={this.handleChange} onFocus={this.openForm} />\n                    {!isFormOpen && <button type=\"button\" className=\"search-btn\"><i className=\"fa fa-search\"></i></button>}\n                </form>\n                {isFormOpen && <div className=\"search-tab pop-up\" >\n                    <button onClick={this.closeForm} className=\"close-btn\"><i className=\"fas fa-times\"></i></button>\n                    <p className=\"headline\">Search Results</p>\n                    {isSearch &&\n                        <div>\n                            {(searchResult && searchResult.length > 0) ? <ul>\n                                {searchResult.map(result => {\n                                    return (\n                                        <li key={result._id} className=\"flex align-center\">\n                                            <div className=\"card-preview-search\">\n                                                <CardPreview card={result} isSearch={true} />\n                                            </div>\n                                            <Link to={`/treller/card/${result._id}`}>\n                                                <h4 className=\"card-name\">{result.title}</h4>\n                                                <p className=\"list-board-name\">\n                                                    In <span className=\"bold\">{listTitle} </span>\n                                                    On <span className=\"bold\">{boardTitle}</span>\n                                                </p>\n                                            </Link>\n                                        </li>\n                                    )\n                                })}\n                            </ul>\n                                : <span>Can't find search result...</span>}\n                        </div>}\n                </div>}\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        searchResult: state.searchReducer.searchResult\n    }\n}\nconst mapDispatchToProps = {\n    getSearchResult,\n    getBoardById\n}\nexport const Filter = connect(mapStateToProps, mapDispatchToProps)(_Filter)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\httpService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\BoardHeader\\BoardHeader.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\img-upload-service.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardOptionsPopUp\\CardOptions.jsx",["226","227","228"],"import { useEffect, useState } from 'react';\nimport Avatar from 'react-avatar';\n\nimport './CardOptions.scss';\n\n\nexport function CardOptions(props) {\n    const [checklist, newChecklist] = useState({ title: '', todos: [] });\n    const [date, setDate] = useState(props.card.dueDate);\n\n    // useEffect(() => {\n    //     console.log(checklist);\n    // })\n\n    const closePopUp = () => {\n        props.closePopUp();\n    }\n\n    const addMember = (ev, val) => {\n        ev.preventDefault();\n        props.func(val);\n    }\n\n    // const handleChange = (ev) => {\n    //     ev.preventDefault()\n    //     const { name, value } = ev.target;\n    //     newChecklist(value)\n    //     console.log(checklist)\n    // }\n\n    const { type, card, board } = props;\n\n    return (\n        <div className=\"card-options\">\n            <button className=\"close-btn\" onClick={closePopUp}><i className=\"fas fa-times\"></i></button>\n            {type === 'member' && <div className=\"members-container\">\n                <p className=\"headline-option\">{type}</p>\n                <h4>Board Members</h4>\n                {board.members && <div>\n                    {board.members.map(member => {\n                        return (\n                            <div onClick={() => props.func(member)} className=\"member flex\" key={member._id}>\n                                <Avatar className=\"avatar-logo\" name={member.fullName} round={true}\n                                    size={30} />\n                                {member.fullName}\n                            </div>)\n                    })}\n                </div>}\n            </div>}\n            {type === 'cover' && <div className=\"covers\">\n                <p className=\"headline-option\">{props.type}</p>\n                <span>Colors</span>\n                <ul className=\"flex wrap justify-center\">\n                    <li className=\"cover color green\" onClick={() => props.func('green')}></li>\n                    <li className=\"cover color yellow\" onClick={() => props.func('yellow')}></li>\n                    <li className=\"cover color orange\" onClick={() => props.func('orange')}></li>\n                    <li className=\"cover color red\" onClick={() => props.func('red')}></li>\n                    <li className=\"cover color purple\" onClick={() => props.func('purple')}></li>\n                    <li className=\"cover color blue\" onClick={() => props.func('blue')}></li>\n                    <li className=\"cover color pink\" onClick={() => props.func('pink')}></li>\n                </ul>\n                <span>Pictures</span>\n                <ul className=\"flex wrap justify-center\">\n                    <li className=\"cover pic pic1\" onClick={() => props.func('pic1')}></li>\n                    <li className=\"cover pic pic2\" onClick={() => props.func('pic2')}></li>\n                    <li className=\"cover pic pic3\" onClick={() => props.func('pic3')}></li>\n                    <li className=\"cover pic pic4\" onClick={() => props.func('pic4')}></li>\n                    <li className=\"cover pic pic5\" onClick={() => props.func('pic5')}></li>\n                    <li className=\"cover pic pic6\" onClick={() => props.func('pic6')}></li>\n                    <li className=\"cover pic pic7\" onClick={() => props.func('pic7')}></li>\n                </ul>\n                <span>Add picture..</span>\n            </div>}\n            {type === 'labels' && <div className=\"labels-container\">\n                <p className=\"headline-option\">{props.type}</p>\n                <div className=\"labels\">\n                    <ul className=\"flex column align-center\">\n                        <li className=\"label green\" onClick={() => props.func('green')}></li>\n                        <li className=\"label yellow\" onClick={() => props.func('yellow')}></li>\n                        <li className=\"label orange\" onClick={() => props.func('orange')}></li>\n                        <li className=\"label red\" onClick={() => props.func('red')}></li>\n                        <li className=\"label purple\" onClick={() => props.func('purple')}></li>\n                        <li className=\"label blue\" onClick={() => props.func('blue')}></li>\n                    </ul>\n                </div>\n            </div>}\n            {type === 'checklists' && <div className=\"checklists-container\">\n                <p className=\"headline-option\">{props.type}</p>\n                <h4>Add Checklist:</h4>\n                <form onSubmit={(ev) => props.func(ev, checklist)}>\n                    <input type=\"text\" name=\"title\" value={checklist.title}\n                        onChange={(ev) => newChecklist({ ...checklist, [ev.target.name]: ev.target.value })} />\n                    <br />\n                    <button>Add</button>\n                </form>\n            </div>}\n            {type === 'dueDate' && <div className=\"due-date-form\">\n                <p className=\"headline-option\">{props.type}</p>\n                <form onSubmit={ev => props.addDueDate(ev, date)}>\n                    <input type=\"datetime-local\" value={date} name=\"dueDate\"\n                        onChange={(ev) => setDate(ev.target.value)} />\n                    <br />\n                    <button>Add</button>\n                </form>\n            </div>}\n        </div>)\n}","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\AddList\\AddList.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardEditModal\\CardEditModal.jsx",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\socketService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\Boards\\Boards.jsx",["229"],"import { Component } from 'react';\nimport { MainHeader } from '../../cmps/MainHeader/MainHeader';\nimport Template1 from './../../assets/templates/bgc-small1.jpg';\nimport Template2 from './../../assets/templates/bgc-small2.jpg';\nimport Template3 from './../../assets/templates/bgc-small3.jpg';\nimport Template4 from './../../assets/templates/bgc-small4.jpg';\n\nimport { connect } from 'react-redux';\nimport { getLoggedInUser } from '../../store/actions/authActions';\nimport { addBoard } from '../../store/actions/boardActions';\nimport { Link } from 'react-router-dom';\n\nimport './Boards.scss';\nimport Avatar from 'react-avatar';\nimport { boardService } from '../../services/boardService';\nimport { eventBus } from '../../services/eventBusService';\n\nexport class _Boards extends Component {\n\n    async componentDidMount() {\n        await this.props.getLoggedInUser();\n    }\n\n    // Why it stops after add board? //\n    addBoard = async () => {\n        debugger\n        const boardToAdd = boardService.getEmptyBoard();\n        const board = await this.props.addBoard(boardToAdd);\n        eventBus.emit('onSetBoard', board._id);\n        this.props.history.push(`/treller/board/${board._id}`);\n    }\n\n\n    render() {\n        const { user } = this.props;\n        const templates = [\n            {\n                name: 'Nature', boardId: \"5ff1b13c36eed552e70fec47\",\n                smallImg: Template1, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large1_kxtkq8.jpg\"\n            },\n            {\n                name: 'Animals', boardId: \"60040605a5297b5978123a93\",\n                smallImg: Template2, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large4_b6g9p0.jpg\"\n            },\n            {\n                name: 'Work', boardId: \"600432fba5297b59781ba1d4\",\n                smallImg: Template3, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large3_dq1hat.jpg\"\n            },\n            {\n                name: 'Relax', boardId: \"60197399331a92cde9ce9f7d\",\n                smallImg: Template4, largImg: \"https://res.cloudinary.com/druhd0ddz/image/upload/v1612278509/treller/bgc-large2_zr62xq.jpg\"\n            }\n        ];\n        if (user) {\n            if (user.boardsMember && user.boardsMember.length > 0) {\n                var favBoards = user.boardsMember.map(board => {\n                    return board;\n                })\n                    .filter(favBoard => {\n                        return favBoard.isFavorite === true;\n                    })\n            }\n        }\n        return (\n            <section>\n                {user && <MainHeader isUserPage={true} user={user} />}\n                {user && <section className=\"boards container\">\n                    <div className=\"boards-container\">\n                        <h3><i className=\"fas fa-columns\"></i> Treller Templates</h3>\n                        <p>Check out our new templates.. </p>\n                        <ul className=\"flex\">\n                            {templates.map(template => {\n                                return (\n                                    <li className=\"template-img\" style={{ backgroundImage: `url(${template.smallImg})` }}\n                                        key={template.name}>\n                                        <Link to={`/treller/board/${template.boardId}`}>\n                                            <span>Template</span>\n                                            <h3 className=\"template-name\">{template.name}</h3>\n                                        </Link>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"user-boards-container\">\n                        <div className=\"boards-container\">\n                            <h3><i className=\"far fa-star\"></i> Starred Boards</h3>\n                            {favBoards ? <ul className=\"starred-boards flex\">\n                                {favBoards.map(board => {\n                                    return (\n                                        <li key={board._id} className=\"board-link flex column space-between\"\n                                            style={{\n                                                backgroundColor: board.style.backgroundColor ? board.style.backgroundColor : ''\n                                                , backgroundImage: board.style.backgroundImg ? `url(${board.style.backgroundImg})` : ''\n                                            }}>\n                                            <Link to={`/treller/board/${board._id}`}>{board.title}</Link>\n                                            <i style={{ color: \"#f2d600\" }} className=\"far fa-star\"></i>\n                                            <div className=\"flex flex-end\">\n                                                {board.members.map(member => {\n                                                    return (\n                                                        <Avatar name={member.fullName} size={20} round={true} key={member._id} />\n                                                    )\n                                                })}\n                                            </div>\n                                        </li>\n                                    )\n                                })}\n                            </ul>\n                                : <p>You don't have starred boards yet...</p>}\n                        </div>\n                        <div className=\"boards-container\">\n                            <h3><i className=\"fab fa-trello\"></i> Your Boards</h3>\n                            {(user.boardsMember && user.boardsMember.length > 0) &&\n                                <ul className=\"other-boards flex\">\n                                    {user.boardsMember.map(board => {\n                                        if (!board.style) {\n                                            return;\n                                        } else {\n                                            return (\n                                                <li key={board._id} className=\"board-link flex column space-between\"\n                                                    style={{\n                                                        backgroundColor: board.style.backgroundColor ? board.style.backgroundColor : '',\n                                                        backgroundImage: board.style.backgroundImg ? `url(${board.style.backgroundImg})` : ''\n                                                    }}>\n                                                    <Link to={`/treller/board/${board._id}`}>{board.title}</Link>\n                                                    <div className=\"flex flex-end\">\n                                                        {board.members.map(member => {\n                                                            return (\n                                                                <Avatar name={member.fullName} size={20} round={true} key={member._id} />\n                                                            )\n                                                        })}\n                                                    </div>\n                                                </li>\n                                            )\n                                        }\n\n                                    })}\n                                    <li className=\"board-link empty flex justify-center align-center\"\n                                        onClick={this.addBoard}>\n                                        Create new board\n                                        </li>\n                                </ul>}\n                        </div>\n                    </div>\n                </section>}\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.loggedInUser,\n        // card: state.cardReducer.currCard,\n        // board: state.boardReducer.currBoard\n    }\n}\nconst mapDispatchToProps = {\n    getLoggedInUser,\n    addBoard\n}\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\index.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\pages\\CardDetails\\CardDetails.jsx",["230"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getLoggedInUser } from '../../store/actions/authActions';\nimport {\n    setCard, updateCard, updateCardCollection, deleteCard, addCard,\n    addComment, deleteComment, addTodo, deleteTodo\n} from '../../store/actions/cardActions';\nimport { getListById } from './../../store/actions/boardActions';\nimport { eventBus } from '../../services/eventBusService';\nimport Avatar from 'react-avatar';\nimport { socketService } from '../../services/socketService';\n\nimport { CardComments } from '../../cmps/CardComments/CardComments';\nimport { CardOptions } from '../../cmps/CardOptionsPopUp/CardOptions';\nimport { CardChecklists } from '../../cmps/CardChecklists/CardChecklists';\nimport { CardDescription } from '../../cmps/CardDescription/CardDescription';\n\nimport './CardDetails.scss';\n\nexport class _CardDetails extends Component {\n    state = {\n        cardToEdit: null,\n        isCardOptionOpen: false,\n        cardOptionType: '',\n        cardOptionFunc: '',\n        isCardComplete: false,\n        listIdx: null\n    }\n\n    async componentDidMount() {\n        const cardId = this.props.match.params.id;\n        await this.props.setCard(cardId);\n        await this.props.getLoggedInUser();\n        this.setState({ cardToEdit: this.props.card });\n        this.getListIdx();\n\n        socketService.setup();\n        socketService.emit('register card', cardId);\n        socketService.on('newCard', (cardId) => this.setCard(cardId));\n        socketService.emit('savedBoard', this.props.card.boardId);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.card !== this.props.card) {\n            const cardToEdit = this.props.card;\n            this.setState({ cardToEdit });\n        }\n    }\n\n    componentWillUnmount() {\n        console.log('unmount')\n        socketService.off('newCard');\n        socketService.off('newBoard');\n        socketService.terminate();\n    }\n\n    getListIdx = () => {\n        let {card, board} = this.props;\n        let listId = card.createdBy.listId;\n      const listIdx = board.lists.findIndex(list =>{\n            return list._id === listId;\n        })\n        this.setState({listIdx})\n    }\n\n    // CARD //\n\n    setCard = async (cardId) => {\n        debugger\n        await this.props.setCard(cardId);\n        this.setState({ cardToEdit: this.props.card });\n    }\n\n    onCloseModal = () => {\n        this.props.history.goBack();\n    }\n\n    handleChangeCard = ({ target }) => {\n        const field = target.name;\n        const value = target.value;\n        this.setState(prevState => ({ cardToEdit: { ...prevState.cardToEdit, [field]: value } }));\n    }\n\n    onEnterPress = async (ev) => {\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\n            ev.preventDefault();\n            this.handleChangeCard(ev);\n            this.updateTitle(ev);\n        }\n    }\n\n    updateTitle = async (ev) => {\n        ev.preventDefault();\n        const { cardToEdit } = this.state;\n        await this.props.updateCard(cardToEdit);\n        await this.props.setCard(cardToEdit._id);\n        this.myTextareaRef.blur();\n    }\n\n    deleteCard = async () => {\n        const { cardId, board } = this.props;\n        const {listIdx} = this.state;\n        await this.props.deleteCard(board._id, listIdx, cardId);\n        this.onCloseModal();\n    }\n\n    copyCard = async () => {\n        const { card, board} = this.props;\n        const {listIdx} = this.state;\n        await this.props.addCard(board._id, card.createdBy.listId, listIdx, card);\n    }\n\n    // DESCRIPTION //\n    onUpdateDescription = async (description) => {\n        const field = description;\n        this.setState(prevState => ({ cardToEdit: { ...prevState.cardToEdit, [field]: description } }));\n        const { cardToEdit } = this.state;\n        await this.props.updateCardCollection(cardToEdit._id, { description });\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    // MEMBERS //\n    addMember = async (ev, member) => {\n        const { cardToEdit } = this.state;\n        let members = cardToEdit.members;\n        members.push(member);\n        this.setState({ cardToEdit });\n        await this.props.updateCard(cardToEdit);\n        await this.props.setCard(cardToEdit._id);\n        eventBus.emit('invite-to-card', { 'membet': member, 'card': cardToEdit })\n    }\n\n    // CHECKLIST //\n    addChecklist = async (ev, checklist) => {\n        ev.preventDefault();\n        debugger\n        const { cardToEdit } = this.state;\n        let checklists = cardToEdit.checklists;\n        checklists.push(checklist);\n        this.setState({ cardToEdit });\n        await this.props.updateCardCollection(cardToEdit._id, { 'checklists': cardToEdit.checklists });\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    onAddTodo = async (checklistIdx, todo) => {\n        const { card } = this.props;\n        debugger\n        await this.props.addTodo(card._id, checklistIdx, todo);\n    }\n\n    handleCheckChecklist = async ({ target }, todo, idx) => {\n        let { cardToEdit } = this.state;\n        if (target.checked) {\n            todo.isDone = true;\n        } else {\n            todo.isDone = false;\n        }\n        cardToEdit.checklist.splice(idx, 1, todo);\n        this.setState({ cardToEdit }, async () => {\n            await this.props.updateCard(cardToEdit);\n        });\n        await this.props.setCard(cardToEdit._id)\n    }\n\n    deleteTodo = async (idx) => {\n        let { cardToEdit } = this.state;\n        cardToEdit.checklist.splice(idx, 1);\n        this.setState({ cardToEdit }, async () => {\n            await this.props.updateCard(cardToEdit);\n        });\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    // DUE DATE //\n    setDate = async (ev, date) => {\n        ev.preventDefault();\n        const { cardToEdit } = this.state;\n        cardToEdit.dueDate = date;\n        await this.props.updateCard(cardToEdit)\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    handleCheckDueDate = ({ target }) => {\n        const field = 'isCardComplete';\n        if (target.checked) {\n            this.setState(({ cardToEdit: { ...this.state.cardToEdit, [field]: true } }));\n        } else {\n            this.setState(({ cardToEdit: { ...this.state.cardToEdit, [field]: false } }));\n        }\n    }\n\n    deleteDueDate = async () => {\n        const { cardToEdit } = this.state;\n        cardToEdit.dueDate = '';\n        await this.props.updateCard(cardToEdit)\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    // LABEL //\n    addLabel = async (label) => {\n        let { cardToEdit } = this.state;\n        cardToEdit.labels.push(label);\n        this.setState(cardToEdit);\n        const labels = cardToEdit.labels;\n        await this.props.updateCardCollection(cardToEdit._id, { labels });\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    // COVER //\n    addCover = async (cover) => {\n        let { cardToEdit } = this.state;\n        cardToEdit.style = { cover };\n        this.setState(cardToEdit);\n        await this.props.updateCardCollection(cardToEdit._id, { cover });\n        await this.props.setCard(cardToEdit._id);\n    }\n\n    // COMMENTS //\n    onAddComment = async (comment) => {\n        const { card } = this.props;\n        await this.props.addComment(card._id, comment);\n        await this.props.setCard(card._id);\n    }\n\n    onDeleteComment = async (commentId) => {\n        const cardId = this.props.cardId;\n        await this.props.deleteComment(cardId, commentId);\n        await this.props.setCard(cardId);\n    }\n\n    // CARD OPTIONS //\n\n    openPopUp = (type, func) => {\n        this.setState({ isCardOptionOpen: true })\n        this.setState({ cardOptionType: type })\n        this.setState({ cardOptionFunc: func })\n    }\n\n    closePopUp = () => {\n        this.setState({ isCardOptionOpen: false })\n    }\n    //\n\n    render() {\n        // const { user, board, list, card } = this.props;\n        const { user, board, card } = this.props;\n        const { cardToEdit, isCardOptionOpen, cardOptionType, cardOptionFunc } = this.state;\n\n        return (\n            <section className=\"card-details modal\">\n                {(card && cardToEdit) && <section className=\"modal-content\">\n                    <button className=\"close-btn\" onClick={this.onCloseModal}>\n                        <i className=\"fas fa-times\"></i>\n                    </button>\n                    {card.style.cover &&\n                        <div className={`cover ${card.style.cover.color ?\n                            card.style.cover.color : card.style.cover.picture}`}>\n                        </div>}\n                    <div className=\"title-container\">\n                        <div className=\"headline flex align-center\">\n                            <i className=\"far fa-file-alt icon\"></i>\n                            <form onSubmit={this.updateTitle} className=\"card-title-form\">\n                                <textarea className=\"card-title\" ref={el => this.myTextareaRef = el}\n                                    name=\"title\" value={cardToEdit.title}\n                                    onChange={this.handleChangeCard} onKeyDown={this.onEnterPress}>\n                                </textarea>\n                            </form>\n                        </div>\n                        {/* <p className=\"list-name\">in list {list.title}</p> */}\n                    </div>\n                    <div className=\"flex\">\n                        <div className=\"main-container\">\n                            <div className=\"other-details flex\">\n                                {(card.members && card.members.length > 0) &&\n                                    <div className=\"members-containers\">\n                                        <h4>Members</h4>\n                                        <div className=\"flex\">\n                                            {card.members.map(member => {\n                                                return <Avatar name={member.fullName}\n                                                    size=\"30\" round={true} key={member._id} />\n                                            })}\n                                        </div>\n                                    </div>\n                                }\n                                {(card.labels && card.labels.length > 0) &&\n                                    <div className=\"labels-container\">\n                                        <h4>Labels</h4>\n                                        <div className=\"flex\">\n                                            {card.labels.map(label => {\n                                                return <div className={`label ${label}`}\n                                                    key={label}></div>\n                                            })}\n                                        </div>\n                                    </div>}\n                                {card.dueDate && <div className=\"due-date-container\">\n                                    <h4>Due Date</h4>\n                                    <input type=\"checkbox\" onChange={this.handleCheckDueDate} />\n                                    <button className=\"due-date\">\n                                        {card.dueDate.replace('T', ' at ')}\n                                        {card.isCardComplete && <span className=\"due-status complete\">Complete</span>}\n                                        {new Date() > new Date(card.dueDate) &&\n                                            <span className=\"due-status over-due\">Over Due</span>}\n                                    </button>\n                                    <button className=\"delete-due-date\" onClick={this.deleteDueDate}>\n                                        <i className=\"far fa-calendar-times\"></i>\n                                    </button>\n                                </div>}\n                            </div>\n                            <CardDescription description={card.description} onUpdateDescription={this.onUpdateDescription} />\n                            {(card.checklists && card.checklists.length > 0) &&\n                                <CardChecklists checklists={card.checklists} onAddTodo={this.onAddTodo} />}\n                            <CardComments comments={card.comments} user={user}\n                                onAddComment={this.onAddComment}\n                                onDeleteComment={this.onDeleteComment} />\n                        </div>\n                        <div className=\"side-container flex column\">\n                            <h4>ADD TO CARD</h4>\n                            <button onClick={() => this.openPopUp('members', this.addMember)} className=\"card-details-btn\">\n                                <i className=\"fas fa-user-friends\"></i> Members</button>\n                            <button onClick={() => this.openPopUp('cover', this.addCover)} className=\"card-details-btn\">\n                                <i className=\"fas fa-palette\"></i> Cover</button>\n                            <button onClick={() => this.openPopUp('labels', this.addLabel)} className=\"card-details-btn\">\n                                <i className=\"fas fa-tags\"></i> Labels</button>\n                            <button onClick={() => this.openPopUp('checklists', this.addChecklist)} className=\"card-details-btn\">\n                                <i className=\"fas fa-tasks\"></i> Checklist</button>\n                            <button onClick={() => this.openPopUp('dueDate', this.setDate)} className=\"card-details-btn\">\n                                <i className=\"fas fa-calendar-week\"></i> Due Date</button>\n                            <br />\n                            <h4>ACTIONS</h4>\n                            <button onClick={this.copyCard} className=\"card-details-btn\">\n                                <i className=\"fas fa-copy\"></i> Copy</button>\n                            <button onClick={this.deleteCard} className=\"card-details-btn\">\n                                <i className=\"fas fa-trash\"></i> Delete</button>\n                        </div>\n                    </div>\n                    {isCardOptionOpen && <CardOptions board={board} type={cardOptionType} card={card}\n                        closePopUp={this.closePopUp} func={cardOptionFunc} />}\n                </section>}\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.loggedInUser,\n        card: state.cardReducer.currCard,\n        board: state.boardReducer.currBoard\n    }\n}\nconst mapDispatchToProps = {\n    getLoggedInUser,\n    setCard,\n    updateCard,\n    updateCardCollection,\n    deleteCard,\n    addCard,\n    addComment,\n    deleteComment,\n    addTodo,\n    deleteTodo\n}\nexport const CardDetails = connect(mapStateToProps, mapDispatchToProps)(_CardDetails)","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\utilService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardChecklists\\CardChecklists.jsx",["231","232","233"],"import { useEffect, useState } from 'react';\nimport './CardChecklists.scss';\n\nexport function CardChecklists(props) {\n    const [todo, setTodo] = useState({ title: '', isDone: false });\n    const [isDeleteBtnShow, toggleDeleteBtn] = useState(false);\n    const [isAddTodoFormShow, toggleAddTodoForm] = useState(false);\n    const [currTodoIdx, setCurrTodo] = useState('')\n\n    useEffect(() => {\n        console.log(currTodoIdx)\n        console.log(isDeleteBtnShow)\n    })\n\n    const addTodo = (ev, checklistIdx) => {\n        ev.preventDefault();\n        debugger\n        props.onAddTodo(checklistIdx, todo);\n    }\n\n    const handleCheckChecklist = ({ target }, todo, idx) => {\n        const value = null;\n        // if (target.checked) {\n        //     value = true;\n        // } else {\n        //     value = false\n        // }\n        // setTodo(todo => ({...todo, [target.name]: value}));\n        // props.handleCheckChecklist(todo)\n    }\n\n\n    // showTodoDeleteBtn = (ev, idx) => {\n    //     ev.stopPropagation();\n    //     this.setState({ isTodoDeleteBtnShow: true, currTodoIdx: idx })\n    // }\n\n    // hideTodoDeleteBtn = (ev, idx) => {\n    //     ev.stopPropagation();\n    //     this.setState({ isTodoDeleteBtnShow: false, currTodoIdx: idx })\n    // }\n\n\n    return (\n        <section className=\"card-checklists\">\n            <div className=\"checklist-container\">\n                {props.checklists.map((checklist, checklistIdx) => {\n                    return (\n                        <div key={checklistIdx}>\n                            <div className=\"headline flex align-center space-between\">\n                                <i className=\"fas fa-tasks icon\"></i><h3>\n                                    {checklist.title}\n                                </h3>\n                                <button className=\"card-details-btn\">Delete</button>\n                            </div>\n                            {checklist.todos && checklist.todos.length > 0 && <ul>\n                                {checklist.todos.map((todo, idx) => {\n                                    return <li className=\"todo flex space-between\" key={idx}\n                                        onMouseEnter={() => toggleDeleteBtn(true), () => setCurrTodo(idx)}\n                                        onMouseLeave={() => toggleDeleteBtn(false), () => setCurrTodo(idx)}>\n                                        <input type=\"checkbox\" id={`todo${idx}`}\n                                            name=\"isDone\"\n                                            onChange={ev => handleCheckChecklist(ev, todo, idx)}\n                                            checked={todo.isDone} />\n                                        <label htmlFor={`todo${idx}`} style={{ textDecoration: todo.isDone ? 'line-through' : 'none' }}>\n                                            {todo.title}\n                                        </label>\n                                        <button onClick={() => this.deleteTodo(idx)} className=\"delete-todo\"\n                                            style={{ display: isDeleteBtnShow && currTodoIdx === idx ? 'block' : 'none' }}>\n                                            <i className=\"fas fa-trash\"></i>\n                                        </button>\n                                    </li>\n                                })}\n                            </ul>}\n                            {!isAddTodoFormShow ? <button className=\"card-details-btn flex open-form\" onClick={toggleAddTodoForm}>Add Todo</button>\n                                : <form onSubmit={ev => addTodo(ev, checklistIdx)} className=\"add-todo\">\n                                    <textarea name=\"title\" value={todo.title}\n                                        onChange={ev => setTodo({ ...todo, [ev.target.name]: ev.target.value })}></textarea>\n                                    <div className=\"flex\">\n                                        <button className=\"add-form-btn\">Add</button>\n                                        <button className=\"exit-btn\">\n                                            <i className=\"fas fa-times\"></i>\n                                        </button>\n                                    </div>\n                                </form>}\n                        </div>)\n                })}\n            </div>\n        </section>\n    )\n}\n\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\services\\searchService.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\reducers\\searchReducer.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\store\\actions\\searchActions.js",[],"C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\CardDescription\\CardDescription.jsx",["234","235","236","237"],"import { useEffect, useState } from 'react';\nimport './CardDescription.scss';\n\nexport function CardDescription(props) {\n    const [description, setDescription] = useState(props.description);\n    const [isDescriptionFormShow, toggleDescriptionForm] = useState(false)\n    const [descriptionFormType, changeDescriptionForm] = useState('fake')\n\n    // useEffect(() => {\n    // })\n\n    const updateDescription = (ev) => {\n        ev.preventDefault();\n        props.onUpdateDescription(description);\n        setDescription(description);\n        toggleDescriptionForm(false);\n        changeDescriptionForm('fake');\n    }\n\n    return (\n        <section className=\"description-container\">\n            <div className=\"headline flex align-center\">\n                <i className=\"fas fa-align-left icon\"></i>\n                <h3>Description</h3>\n                {(description && !isDescriptionFormShow) &&\n                    <button className=\"card-details-btn\"\n                        onClick={() => toggleDescriptionForm(true),\n                            () => changeDescriptionForm('textarea')}>\n                        Edit\n                        </button>}\n            </div>\n            <form className=\"description-form\"\n                onSubmit={(ev) => updateDescription(ev)}>\n                <textarea\n                    onClick={() => toggleDescriptionForm(true),\n                        () => changeDescriptionForm('textarea')}\n                    onBlur={() => toggleDescriptionForm(false)}\n                    className={`description ${description ? 'value' : ''} ${descriptionFormType}`}\n                    placeholder=\"Add more detailed description...\"\n                    onChange={ev => setDescription(ev.target.value)}\n                    value={description}\n                    name=\"description\">\n                </textarea>\n                <br />\n                {(descriptionFormType === 'textarea') &&\n                    <div className=\"btn flex justify-start\">\n                        <button className=\"add-form-btn\">Save</button>\n                        <button className=\"exit-btn\"\n                            onClick={() => toggleDescriptionForm(false), () => changeDescriptionForm('fake')}>\n                            <i className=\"fas fa-times\"></i>\n                        </button>\n                    </div>}\n            </form>\n        </section>\n    )\n}\n\n","C:\\Users\\Karin\\Desktop\\WEB\\Treller\\frontend\\src\\cmps\\InviteMembers\\InviteMembers.jsx",[],{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":6,"column":3,"nodeType":"244","messageId":"245","endLine":6,"endColumn":7},{"ruleId":"242","severity":1,"message":"246","line":7,"column":3,"nodeType":"244","messageId":"245","endLine":7,"endColumn":13},{"ruleId":"242","severity":1,"message":"247","line":9,"column":3,"nodeType":"244","messageId":"245","endLine":9,"endColumn":12},{"ruleId":"242","severity":1,"message":"248","line":20,"column":10,"nodeType":"244","messageId":"245","endLine":20,"endColumn":22},{"ruleId":"242","severity":1,"message":"249","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"242","severity":1,"message":"250","line":44,"column":19,"nodeType":"244","messageId":"245","endLine":44,"endColumn":23},{"ruleId":"242","severity":1,"message":"251","line":44,"column":25,"nodeType":"244","messageId":"245","endLine":44,"endColumn":32},{"ruleId":"252","severity":1,"message":"253","line":127,"column":49,"nodeType":"254","messageId":"255","endLine":127,"endColumn":51},{"ruleId":"256","severity":1,"message":"257","line":10,"column":1,"nodeType":"258","endLine":23,"endColumn":2},{"ruleId":"238","replacedBy":"259"},{"ruleId":"240","replacedBy":"260"},{"ruleId":"242","severity":1,"message":"243","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":21,"column":53,"nodeType":"254","messageId":"255","endLine":21,"endColumn":55},{"ruleId":"261","severity":1,"message":"262","line":24,"column":39,"nodeType":"263","endLine":24,"endColumn":51},{"ruleId":"242","severity":1,"message":"264","line":9,"column":10,"nodeType":"244","messageId":"245","endLine":9,"endColumn":18},{"ruleId":"242","severity":1,"message":"249","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"242","severity":1,"message":"265","line":19,"column":11,"nodeType":"244","messageId":"245","endLine":19,"endColumn":20},{"ruleId":"242","severity":1,"message":"266","line":31,"column":19,"nodeType":"244","messageId":"245","endLine":31,"endColumn":23},{"ruleId":"252","severity":1,"message":"267","line":117,"column":45,"nodeType":"268","messageId":"269","endLine":117,"endColumn":52},{"ruleId":"242","severity":1,"message":"270","line":8,"column":10,"nodeType":"244","messageId":"245","endLine":8,"endColumn":21},{"ruleId":"242","severity":1,"message":"271","line":22,"column":15,"nodeType":"244","messageId":"245","endLine":22,"endColumn":20},{"ruleId":"272","severity":1,"message":"273","line":59,"column":82,"nodeType":"274","messageId":"275","endLine":59,"endColumn":83},{"ruleId":"272","severity":1,"message":"273","line":60,"column":83,"nodeType":"274","messageId":"275","endLine":60,"endColumn":84},{"ruleId":"242","severity":1,"message":"249","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":27,"column":67,"nodeType":"274","messageId":"275","endLine":27,"endColumn":68},{"ruleId":"272","severity":1,"message":"273","line":35,"column":63,"nodeType":"274","messageId":"275","endLine":35,"endColumn":64},{"ruleId":"272","severity":1,"message":"273","line":49,"column":72,"nodeType":"274","messageId":"275","endLine":49,"endColumn":73},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'useParams' is defined but never used.","'_CardDetails' is defined but never used.","'useEffect' is defined but never used.","'list' is assigned a value but never used.","'listIdx' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["276"],["277"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'eventBus' is defined but never used.","'addMember' is assigned a value but never used.","'card' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'getListById' is defined but never used.","'value' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]